buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
// using jpackage only works if the JDK version is 14 or higher.
// your JAVA_HOME environment variable may also need to be a JDK with version 14 or higher.
		if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
			classpath "org.beryx:badass-runtime-plugin:1.13.0"
		}
	}
}
if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
	apply plugin: 'org.beryx.runtime'
}
else {
	apply plugin: 'application'
}
def os = System.properties['os.name'].toLowerCase()

sourceCompatibility = 1.8
mainClassName = 'com.github.tommyettinger.headless.HeadlessLauncher'
eclipse.project.name = appName + '-headless'
sourceSets.main.resources.srcDirs = [file('../assets').path]

dependencies {
	implementation project(':core')
	implementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
}

jar {
	archiveBaseName.set(appName)
// using 'lib' instead of the default 'libs' appears to be needed by jpackageimage.
	destinationDirectory = file("${project.projectDir}/build/lib")
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
	doLast {
		file(archiveFile).setExecutable(true, false)
	}
}

if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
	tasks.jpackageImage.doNotTrackState("This task both reads from and writes to the build folder.")
	runtime {
		options.set(['--strip-debug',
					 '--compress', '2',
					 '--no-header-files',
					 '--no-man-pages',
					 '--strip-native-commands',
					 '--vm', 'server'])
// you could very easily need more modules than this one.
// use the lwjgl3:suggestModules task to see which modules may be needed.
		modules.set([
				'jdk.unsupported'
		])
		distDir.set(file("${project.projectDir}/build/"))
		jpackage {
			if(version.toString().contains("-")) version = version.toString().takeBefore("-")
			imageName = appName
// you can set this to false if you want to build an installer, or keep it as true to build just an app.
			skipInstaller = true
// this may need to be set to a different path if your JAVA_HOME points to a low JDK version.
			jpackageHome = javaHome.getOrElse("")
			mainJar = jar.archiveFileName.get()
			if (os.contains('win')) {
				imageOptions = ["--icon", "icons/logo.ico"]
			} else if (os.contains('nix') || os.contains('nux') || os.contains('bsd')) {
				imageOptions = ["--icon", "icons/logo.png"]
			} else if (os.contains('mac')) {
				imageOptions = ["--icon", "icons/logo.icns", "--java-options", "\"-XstartOnFirstThread\""]
			}
		}
	}
}
